package main

import (
	"co2signal/icon"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"time"

	"github.com/getlantern/systray"
	"github.com/skratchdot/open-golang/open"
)

func main() {
	systray.Run(onReady, onExit)
}

type Config struct {
	ApiToken    string
	CountryCode string
}

type Dataset struct {
	DateTime             string  `json:"datetime"`
	CarbonIntensity      float32 `json:"carbonIntensity"`
	FossilFuelPercentage float32 `json:"fossilFuelPercentage"`
}
type Unitset struct {
	CarbonIntensity string `json:"carbonIntensity"`
}
type CO2Response struct {
	Disclaimer  string  `json:"_disclaimer"`
	Status      string  `json:"status"`
	CountryCode string  `json:"countryCode"`
	Data        Dataset `json:"data"`
	Units       Unitset `json:"units"`
	Message     string  `json:"message"`
}

func onReady() {
	// Load config
	config := LoadPreferences()

	// Request CO2 Signal
	response := RequestC02Signal(config.CountryCode, config.ApiToken)
	updatedDate, _ := time.Parse(time.RFC3339, response.Data.DateTime)
	fmt.Printf("%s", updatedDate)

	// Display response
	go func() {
		systray.SetTemplateIcon(icon.AU, icon.AU)
		title := fmt.Sprintf("%f%%", response.Data.FossilFuelPercentage)
		systray.SetTitle(title)
		systray.SetTooltip(title)
		// Status
		mFF := systray.AddMenuItem("fossil fuel percentage: "+title, "percentage of electricity\ngenerated by coal, gas or oil")
		mFF.SetTitle("fossil fuel percentage: " + title)

		// Links
		mAPISite := systray.AddMenuItem("API Website (CO2 Signal)", "API Website (CO2 Signal)")
		mElectricityMap := systray.AddMenuItem("electricityMap Website", "electricityMap Website")
		systray.AddSeparator()

		// Metadata
		mUpdate := systray.AddMenuItem(
			fmt.Sprintf("Updated %s seconds ago", time.Since(updatedDate)), "",
		)

		mUpdate.Disable()

		mQuit := systray.AddMenuItem("Quit", "Quit the whole app")
		mQuit.SetIcon(icon.AU)

		systray.AddSeparator()

		for {
			select {
			case <-mAPISite.ClickedCh:
				open.Run("https://www.co2signal.com/")
			case <-mElectricityMap.ClickedCh:
				open.Run("https://electricitymap.org")

			case <-mQuit.ClickedCh:
				systray.Quit()
				fmt.Println("Quit2 now...")
				return
			}
		}
	}()
}

func onExit() {
	now := time.Now()
	ioutil.WriteFile(fmt.Sprintf(`on_exit_%d.txt`, now.UnixNano()), []byte(now.String()), 0644)
}

func RequestC02Signal(countryCode string, authToken string) CO2Response {
	dataset := CO2Response{
		Status: "Down",
	}
	/*
		client := &http.Client{
			Timeout: time.Second * 10,
		}
		req, err := http.NewRequest("GET", fmt.Sprintf("http://api.co2signal.com/v1/latest?countryCode=%s", countryCode), nil)
		req.Header.Set("auth-token", authToken)
		response, err := client.Do(req)
		if err != nil {
			return dataset
		}
		defer response.Body.Close()
		b, err := io.ReadAll(response.Body)
		fmt.Printf("%s", string(b))

		json.Unmarshal(b, &dataset)
		return dataset
	*/
	b := []byte(`{"_disclaimer":"This data is the exclusive property of Tomorrow and/or related parties. If you're in doubt about your rights to use this data, please contact hello@tmrow.com","status":"ok","countryCode":"NZ-NZN","data":{"datetime":"2021-08-30T23:00:00.000Z","carbonIntensity":111,"fossilFuelPercentage":16.13},"units":{"carbonIntensity":"gCO2eq/kWh"}}`)

	json.Unmarshal(b, &dataset)
	return dataset
}

func LoadPreferences() Config {
	data, err := ioutil.ReadFile("../preferences.json")
	if err != nil {
		fmt.Print(err)
	}

	var obj Config

	// unmarshall it
	err = json.Unmarshal(data, &obj)
	if err != nil {
		return Config{}
	}
	return obj
}
